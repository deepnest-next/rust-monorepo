name: CI svg-preprocessor
env:
  DEBUG: napi:*
  APP_NAME: svg-preprocessor
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  WORK_DIR_DOCKER: /build/crates/npm/deepnest_svg_preprocessor
  MYWORKDIR: ${{ github.workspace}}/crates/npm/deepnest_svg_preprocessor
permissions:
  contents: write
  id-token: write
"on":
  workflow_dispatch:
    inputs:
      release:
        description: 'Release package'
        required: false
        type: boolean
        default: false
      version:
        description: 'Version to release (x.y.z)'
        required: false
        type: string
  pull_request:
    types:
      - closed
    branches:
      - main
    paths:
      - ".github/workflows/deepnest_svg_preprocessor.yml"
      - "crates/npm/deepnest_svg_preprocessor/**"
      - "!crates/npm/deepnest_svg_preprocessor/**/*.md"
      - "!crates/npm/deepnest_svg_preprocessor/LICENSE"
      - "!crates/npm/deepnest_svg_preprocessor/**/*.gitignore"
      - "!crates/npm/deepnest_svg_preprocessor/.editorconfig"
      - "!crates/npm/deepnest_svg_preprocessor/docs/**"
defaults:
  run:
    working-directory: crates/npm/deepnest_svg_preprocessor
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: yarn build --target x86_64-apple-darwin
          - host: windows-latest
            build: yarn build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              yarn build --target i686-pc-windows-msvc
              yarn test
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: yarn build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: yarn build --target x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
            build: yarn build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: yarn build --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: yarn build --target armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            build: yarn build --target armv7-unknown-linux-musleabihf
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              yarn build --target aarch64-unknown-linux-musl
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-riscv64-linux-gnu -y
            build: yarn build --target riscv64gc-unknown-linux-gnu
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 22
          cache: yarn
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' || matrix.settings.target == 'armv7-unknown-linux-musleabihf' }}
        with:
          version: 0.13.0
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 22
          cache: yarn
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w ${{ env.WORK_DIR_DOCKER }}"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ github.workspace}}/crates/npm/deepnest_svg_preprocessor/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  # build-freebsd:
  #   runs-on: macos-13
  #   name: Build FreeBSD
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build
  #       id: build
  #       uses: cross-platform-actions/action@v0.24.0
  #       env:
  #         DEBUG: napi:*
  #         RUSTUP_IO_THREADS: 1
  #       with:
  #         operating_system: freebsd
  #         version: '13.2'
  #         memory: 8G
  #         cpu_count: 3
  #         environment_variables: DEBUG RUSTUP_IO_THREADS
  #         shell: bash
  #         run: |
  #           sudo pkg install -y -f curl node libnghttp2 npm
  #           sudo npm install -g yarn --ignore-scripts
  #           curl https://sh.rustup.rs -sSf --output rustup.sh
  #           sh rustup.sh -y --profile minimal --default-toolchain stable
  #           source "$HOME/.cargo/env"
  #           echo "~~~~ rustc --version ~~~~"
  #           rustc --version
  #           echo "~~~~ node -v ~~~~"
  #           node -v
  #           echo "~~~~ yarn --version ~~~~"
  #           yarn --version
  #           pwd
  #           ls -lah
  #           whoami
  #           env
  #           freebsd-version
  #           yarn install
  #           yarn build
  #           yarn test
  #           rm -rf node_modules
  #           rm -rf target
  #           rm -rf .yarn/cache
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: bindings-freebsd
  #         path: ${{ env.APP_NAME }}.*.node
  #         if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - "20"
          - "22"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          architecture: x64
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.MYWORKDIR }}/
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: ${{ env.MYWORKDIR }}/
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w ${{ env.WORK_DIR_DOCKER }} node:${{ matrix.node }}-slim yarn test
  test-linux-x64-musl-binding:
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: ${{ env.MYWORKDIR }}/
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w ${{ env.WORK_DIR_DOCKER }} node:${{ matrix.node }}-alpine yarn test
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: ${{ env.MYWORKDIR }}/
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w ${{ env.WORK_DIR_DOCKER }}"
          run: |
            set -e
            yarn test
            ls -la
  test-linux-aarch64-musl-binding:
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: ${{ env.MYWORKDIR }}/
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "musl"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-alpine
          options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w ${{ env.WORK_DIR_DOCKER }}"
          run: |
            set -e
            yarn test
  test-linux-arm-gnueabihf-binding:
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "20"
          - "22"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: ${{ env.MYWORKDIR }}/
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-bullseye-slim
          options: "--platform linux/arm/v7 -v ${{ github.workspace }}:/build -w ${{ env.WORK_DIR_DOCKER }}"
          run: |
            set -e
            yarn test
            ls -la
  version-bump:
    name: Determine version bump
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true') || 
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set-version.outputs.new_version }}
      version_type: ${{ steps.set-version.outputs.version_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn

      - name: Install dependencies
        run: yarn install
        
      - name: Determine version type from commits
        id: check-commits
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: |
          PR_COMMITS=$(git log ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --pretty=format:"%s")
          echo "PR Commits:"
          echo "$PR_COMMITS"
          
          if echo "$PR_COMMITS" | grep -q -E "^(BREAKING|MAJOR)"; then
            echo "version_type=major" >> $GITHUB_OUTPUT
          elif echo "$PR_COMMITS" | grep -q -E "^(FEATURE|MINOR)"; then
            echo "version_type=minor" >> $GITHUB_OUTPUT
          else
            echo "version_type=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Use manual version if provided
        id: manual-version
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true'
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "Manual version specified: ${{ github.event.inputs.version }}"
          else
            echo "No valid version specified, will auto-increment"
          fi
      
      - name: Set version
        id: set-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          if [[ ! -z "${{ steps.manual-version.outputs.version }}" ]]; then
            NEW_VERSION="${{ steps.manual-version.outputs.version }}"
            VERSION_TYPE="manual"
          else
            # Parse current version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            
            # Determine new version based on commit messages
            VERSION_TYPE="${{ steps.check-commits.outputs.version_type }}"
            if [ "$VERSION_TYPE" == "major" ]; then
              NEW_VERSION="$((MAJOR+1)).0.0"
            elif [ "$VERSION_TYPE" == "minor" ]; then
              NEW_VERSION="${MAJOR}.$((MINOR+1)).0"
            else
              # Default to patch version bump
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH+1))"
              VERSION_TYPE="patch"
            fi
          fi
          
          echo "New version will be: $NEW_VERSION (Type: $VERSION_TYPE)"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
  
  publish:
    name: Publish
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true') || 
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs:
      #      - build-freebsd
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
      - version-bump
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: yarn
      - name: Install dependencies
        run: yarn install
        
      - name: Update package.json version
        run: |
          NEW_VERSION="${{ needs.version-bump.outputs.new_version }}"
          VERSION_TYPE="${{ needs.version-bump.outputs.version_type }}"
          echo "Updating package.json to version $NEW_VERSION (Type: $VERSION_TYPE)"
          
          # Update version in package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          echo "Updated package.json to version $NEW_VERSION"
          cat package.json | grep version
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.MYWORKDIR }}/artifacts
      
      - name: Move artifacts
        run: yarn artifacts
      
      - name: List packages
        run: ls -R ./npm
        shell: bash
      
      - name: Configure Git
        run: |
          git config --local user.email "github@josef-froehle.de"
          git config --local user.name "Josef Fröhle"
      
      - name: Commit version changes
        run: |
          git add package.json
          git commit -m "Release v${{ needs.version-bump.outputs.new_version }}"
          
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
      
      - name: Create Release Tag
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: svg-preprocessor-v${{ needs.version-bump.outputs.new_version }}
          release_name: SVG Preprocessor v${{ needs.version-bump.outputs.new_version }}
          draft: false
          prerelease: false
      
      - name: Publish to NPM
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm config set provenance true
          npm publish --access public
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
