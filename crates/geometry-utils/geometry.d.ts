/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Point */
export interface Point {
  x: number
  y: number
}
export declare function rotatePoint(point: Point, angle: number): Point
/** Point */
export interface Polygon {
  points: Array<Point>
  children?: Array<Array<Point>>
}
export declare function deepnestPolygonArea(polygon: Polygon): number
export interface Rect {
  x: number
  y: number
  width: number
  height: number
}
/**
 * Returns `true` if `a` and `b` are approximately equal within the given tolerance.
 * If `tolerance` is `None`, a default tolerance of `1e-9` is used.
 */
export declare function almostEqual(a: number, b: number, tolerance?: number | undefined | null): boolean
/** Calculate the area */
export declare function polygonArea(polygon: Array<Point>): number
export declare function getPolygonBounds(polygon: Array<Point>): Rect | null
export declare function withinDistance(p1: Point, p2: Point, distance: number): boolean
